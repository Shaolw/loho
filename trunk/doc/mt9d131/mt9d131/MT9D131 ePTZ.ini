;**************************************************************************************
;  Copyright 2006 Micron Technology, Inc. All rights reserved.
;
;
;  No permission to use, copy, modify, or distribute this software and/or
;  its documentation for any purpose has been granted by Micron Technology, Inc.
;  If any such permission has been granted ( by separate agreement ), it
;  is required that the above copyright notice appear in all copies and
;  that both that copyright notice and this permission notice appear in
;  supporting documentation, and that the name of Micron Technology, Inc. or any
;  of its trademarks may not be used in advertising or publicity pertaining
;  to distribution of the software without specific, written prior permission.
;
;
;	This software and any associated documentation are provided "AS IS" and 
;	without warranty of any kind.   MICRON TECHNOLOGY, INC. EXPRESSLY DISCLAIMS 
;	ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT 
;	OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS 
;	FOR A PARTICULAR PURPOSE.  MICRON DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED 
;	IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE 
;	WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, MICRON DOES NOT WARRANT OR 
;	MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY 
;	ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY, 
;	OR OTHERWISE.  
;**************************************************************************************/
; 
; Default INI file for the MI-2010SOCJ-REV5 (Chip ID 0x1519)
;
; $Revision: 1.1 $
; $Date: 2006/04/04 19:38:03 $ 
;
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register 
; settings. 
; The [Default Registers] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing 
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples: 
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

[Enable PLL 12MHz Ext/60 MHz Out]
REG=0, 0x66, 0x1400
REG=0, 0x67, 0x0501
REG=0, 0x65, 0xA000
DELAY=1
REG=0, 0x65, 0x2000
DELAY=100
STATE=Detect Master Clock,1

[800x600 output from 800x600 window - Context B YCrCb]
//**************************
//*** YCbCr in Context B ***
//**************************
VAR=7, 11, 0x0030	// bypass JPEG by setting bit[5] = 1
VAR=7, 116, 0x0501	// change N1 by setting bit[3:0] = 1

//***************************************************************
//*** cropping the field of view to achieve higher frame rate ***
//***************************************************************
VAR=7, 9, 0x258   // output height_B = 600	this sets the output widow size
VAR=7, 7, 0x320   // output width_B = 800	 part of the zoom equation

VAR=7, 53, 0x0   // crop_x0_B = 0		this sets the actual window output size
VAR=7, 55, 0x320   // crop_x1_B = 800		 the X0 and Y0 values are used in pan equation
VAR=7, 57, 0x0   // crop_y0_B = 0		 the X1 and Y1 values are used in zoom equation
VAR=7, 59, 0x258   // crop_y1_B = 600

VAR=7, 27, 0x01C   // s_row_start_B = 28	this limits the number of rows exposed in the sensor
VAR=7, 29, 0x03C   // s_col_start_B = 60	 doing this makes the higher frame rate possible
VAR=7, 31, 0x258   // s_row_height_B = 600	 for proper operation, the image window defined here 
VAR=7, 33, 0x320   // s_col_width_B = 800	 must be larger than the crop window

// with fixed output and crop windows of 800x600, panning is achieved by adjusting the
// s_row_start_B and S_col_start_B registers

//******************************
//*** switch to capture mode ***
//******************************
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[window shift placing first pixel at 0x0]
VAR=7, 27, 0x01C   // s_row_start_B = 28  from first active pixel
VAR=7, 29, 0x03C   // s_col_start_B = 60  from first active pixel
LOAD = context refresh

[window shift placing first pixel at 370x286]
VAR=7, 27, 0x13A   // s_row_start_B = 314  from 600/2 before center active pixel 1228/2	 614-300
VAR=7, 29, 0x15C   // s_col_start_B = 430  from 800/2 before center active pixel 1660/2  830-400
LOAD = context refresh

[window shift placing first pixel at 800x600]
VAR=7, 27, 0x274   // s_row_start_B = 628  from 600 before last active pixel address  1228-600	
VAR=7, 29, 0x35C   // s_col_start_B = 860  from 800 before last active pixel address  1660-800
LOAD = context refresh

[output resolution to Full 800x600]
VAR=7, 9, 0x258   // output height_B = 600	this sets the output widow size
VAR=7, 7, 0x320   // output width_B = 800	 part of the zoom equation
LOAD = refresh sequencer

[output resolution to Half 400x300]
VAR=7, 9, 0x12C   // output height_B = 300	this sets the output widow size
VAR=7, 7, 0x190   // output width_B = 400	 part of the zoom equation
LOAD = refresh sequencer

[output resolution to VGA 640x480]
VAR=7, 9, 0x1E0   // output height_B = 480	this sets the output widow size
VAR=7, 7, 0x280   // output width_B = 640	 part of the zoom equation
LOAD = refresh sequencer

[using 400x300 pan & zoom to 200% placing first pixel at 0x0]
VAR=7, 9, 0x12C   // output height_B = 300	this sets the output widow size
VAR=7, 7, 0x190   // output width_B = 400	 part of the zoom equation
VAR=7, 53, 0x0   // crop_x0_B = 0		this sets the actual window output size
VAR=7, 55, 0x190   // crop_x1_B = 400		 the X0 and Y0 values are used in pan equation
VAR=7, 57, 0x0   // crop_y0_B = 0		 the X1 and Y1 values are used in zoom equation
VAR=7, 59, 0x12C   // crop_y1_B = 300
LOAD = refresh sequencer

[using 400x300 pan & zoom to 200% placing first pixel at 200x150]
VAR=7, 9, 0x12C   // output height_B = 300	this sets the output widow size
VAR=7, 7, 0x190   // output width_B = 400	 part of the zoom equation
VAR=7, 53, 0x0C8   // crop_x0_B = 200		this sets the actual window output size
VAR=7, 55, 0x258   // crop_x1_B = 600		 the X0 and Y0 values are used in pan equation
VAR=7, 57, 0x096   // crop_y0_B = 150		 the X1 and Y1 values are used in zoom equation
VAR=7, 59, 0x1C2   // crop_y1_B = 450
LOAD = refresh sequencer

[using 400x300 pan & zoom to 200% placing first pixel at 400x300]
VAR=7, 9, 0x12C   // output height_B = 300	this sets the output widow size
VAR=7, 7, 0x190   // output width_B = 400	 part of the zoom equation
VAR=7, 53, 0x190   // crop_x0_B = 400		this sets the actual window output size
VAR=7, 55, 0x320   // crop_x1_B = 800		 the X0 and Y0 values are used in pan equation
VAR=7, 57, 0x12C   // crop_y0_B = 300		 the X1 and Y1 values are used in zoom equation
VAR=7, 59, 0x258   // crop_y1_B = 600
LOAD = refresh sequencer

[refresh sequencer]
VAR  = 1, 3, 0x005        //Refresh Sequencer = 5
DELAY = 1500
VAR  = 1, 3, 0x006        //Refresh Sequencer Mode = 6

[context refresh]
VAR  = 1, 3, 0x001        //context switch = 1
DELAY = 1500
VAR  = 1, 3, 0x002        //context switch = 2 - this context switching forces resync of register change

